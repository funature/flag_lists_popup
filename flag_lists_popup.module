<?php

/**
 * @file
 * The Flag lists popup module.
 */
define('FLAG_LISTS_POPUP_PATH', drupal_get_path('module', 'flag_lists_popup'));

/**
 * Implementation of hook_theme().
 */
function flag_lists_popup_theme() {
  return array(
    'flag_lists_popup' => array(
      'arguments' => array('node' => NULL, 'lists' => NULL, 'create' => NULL),
      'template' => 'flag-lists-popup',
    ),
  );
}

/**
 * Implementation of hook_menu().
 */
function flag_lists_popup_menu() {
  $items = array();
  $items['flp-ajax/new'] = array(
    'page callback' => 'flag_lists_popup_ajax_create',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['flp-ajax/%/%/%node'] = array(
    'page callback' => 'flag_lists_popup_ajax_status',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function flag_lists_popup_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'view' && !$a3 && user_access('create flag lists') && flag_lists_template_exists($node->type)) {
    // add frontend
    drupal_add_js(FLAG_LISTS_POPUP_PATH . '/flag_lists_popup.js');
    drupal_add_css(FLAG_LISTS_POPUP_PATH . '/flag_lists_popup.css');
    // get flags
    global $user;
    $lists = array();
    $flags = flag_lists_get_user_flags($node->type);
    foreach ($flags as $flag) {
      $lists[] = (object) array(
        'url' => implode('/', array('', 'flp-ajax', $flag->name, flag_get_token($node->nid), $node->nid)),
        'name' => $flag->name,
        'title' => $flag->title,
        'status' => _flag_lists_is_flagged($flag, $node->nid, $user->uid, 0),
      );
    }
    // print linkshttp://d6.dev/flp-ajax/flag_lists_1_2//1
    $node->content['flag_lists_popup'] = array(
      '#value' => theme('flag_lists_popup', $node, $lists, user_access('create flag lists')), 
      '#weight' => 10,
    );
  }
}

/**
 * Menu callback for creating flag.
 */
function flag_lists_popup_ajax_create() {
  global $user;

  // get variables
  $nid = check_plain($_POST['nodeNid']);
  $type = check_plain($_POST['nodeType']);
  $title = check_plain($_POST['flagTitle']);
  
  // Ensure 255 charactor or less name.
  if (drupal_strlen($title) > 255) {
    $error = t('The @name title may only be 32 characters long.', array('@name' => variable_get('flag_lists_name', t('list'))));
  }
  // Ensure the machine name is unique.
  elseif (flag_lists_title_exists($title, $type)) {
    $error = t('You already have a @name with this name for this type of content.', array('@name' => variable_get('flag_lists_name', t('list'))));
  }
  // if error
  if (isset($error)) {
    print drupal_json(array('status' => FALSE, 'errorMessage' => $error));
    exit;
  }
  // Load the template row.

  $row = db_fetch_object(db_query("SELECT * from {flags} f LEFT JOIN {flag_lists_types} fl on f.name = fl.name WHERE fl.type = '%s'", $type));
  $newflag = flag_flag::factory_by_content_type('node');

  $flag = $newflag->factory_by_row($row);
  // The template fid becomes the flag_lists parent flag.
  $flag->pfid = $row->fid;
  // The fid is NULL because this is really a new flag.
  $flag->fid = NULL;
  // The name is created in the save function.
  $flag->name = NULL;
  $flag->link_type = 'toggle';
  $flag->title = check_plain($_POST['flagTitle']);
  $flag->types = array($type);
  $flag->uid = $user->uid;
  flag_lists_set_messages($flag);
  // Save it.
  flag_lists_save($flag);

  print drupal_to_js(array(
    'status' => TRUE,
    'flag' => (object) array(
      'url' => implode('/', array('', 'flp-ajax', $flag->name, flag_get_token($nid), $nid)),
      'name' => $flag->name,
      'title' => $flag->title,
      'status' => _flag_lists_is_flagged($flag, $node->nid, $user->uid, 0),
    ),
  ));
  exit;
}

/**
 * Menu callback for (un)flagging a node.
 */
function flag_lists_popup_ajax_status($flag_name = NULL, $token = NULL, $node = NULL) {
  global $user;

  // Ensure user is authorized.
  if ($user->uid == 0) {
    $error = t('You must have JavaScript and cookies enabled in your browser to flag content.');
  }
  // Check flag token is valid.
  elseif (!flag_check_token($token, $node->nid)) {
    $error = t('Bad token. You seem to have followed an invalid link.');
  }
  // Check if flag is available for this user.
  elseif (!($flag = flag_lists_get_flag($flag_name))) {
    $error = t('You are not allowed to flag, or unflag, this content.');
  }
  // if error
  if (isset($error)) {
    print drupal_json(array('status' => FALSE, 'errorMessage' => $error));
    exit;
  }
  
  flag_lists_do_flag($flag, $_POST['flagStatus'] == 'true' ? 'unflag' : 'flag', $node->nid);
  print drupal_to_js(array(
    'status' => TRUE,
    'flagStatus' => _flag_lists_is_flagged($flag, $node->nid, $user->uid, flag_get_sid($user->uid)) ? TRUE : FALSE,
  ));
  exit;
}
